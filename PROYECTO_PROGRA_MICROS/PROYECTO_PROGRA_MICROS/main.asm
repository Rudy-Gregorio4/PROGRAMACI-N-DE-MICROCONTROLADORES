//***************************************************
// Universidad del Valle de Guatemala
// IE2023: Programación de Microcontroladores 
// Autor: Rudy Estuardo Gregorio Ramírez 
// Proyecto: Proyecto 1
// Descripción: Reloj 24 Hrs, Calendario y Alarma
// Hardware: ATMEGA328P
// Created: 3/1/2024 12:29:15 AM
//****************************************************
// Encabezado 
//****************************************************
.include "M328PDEF.inc"
.def UNIDAD_MIN = R21
.def DECENA_MIN = R22
.def UNIDAD_HORA = R23
.def DECENA_HORA = R24

.def DIA_UNIDAD = R25
.def DIA_DECENA = R26
.def MES_UNIDAD = R27
.def MES_DECENA = R19

.def MIN_ALAR = R1
.def DECMIN_ALAR = R2
.def HOR_ALAR = R3
.def DECHOR_ALAR = R4

.def RESPALDO = R10

.cseg
.org 0x00
	JMP MAIN   //MAIN
.org 0x0006
	JMP INT_PC  //INTERRUPCION DE PINES
.org 0x001A
	JMP INT_TIMER1  //INTERRUPCION TIMER 1
.org 0x0020
	JMP INT_TIMER0  //INTERRUPCION TIMER 0
//****************************************************
//Configuración de la Pila
//****************************************************
Main: 
LDI R16, LOW(RAMEND)
OUT SPL, R16
LDI R17, HIGH(RAMEND)
OUT SPH, R17

//****************************************************

//****************************************************
//Configuración MCU
//****************************************************
SETUP:


	LDI R16, 0b1000_0000     //el timer se establece a 8MHz
	LDI R16, (1 << CLKPCE)
	STS CLKPR, R16

	LDI R16, 0b0000_0001
	STS CLKPR, R16
		
	LDI R16, 0b0001_1111 //Configuramos al pueto B como entradas y salidas
	OUT	PORTB, R16

	LDI R16, 0b0010_0000 //Configuración al puerto B como pull ups
	OUT DDRB, R16
	
	LDI R16, 0b011_1111	//Configuramos el puerto C como salidas
	OUT DDRC, R16

	LDI R16, 0b1111_1111	//Configuramos el puerto D como salidas
	OUT DDRD, R16

	LDI R16, (1<<PCINT4) |(1<<PCINT3) |(1<<PCINT2) |(1<<PCINT1) | (1<<PCINT0)    //se establecen los pines 0 y 4 del puerto b como interrupciones
	STS PCMSK0, R16

	LDI R16, (1<<PCIE0)
	STS PCICR, R16

	LDI	R16, 0x00		//DESABILITACIÓN DE RX0 Y TX1 PARA QUE NO SIEMPRE ESTÉN ENCENDIDOS
	STS	UCSR0B, R16
	LDI R16, (1<<PCIE0)
	SEI
	
	TABLA7SEG: .DB 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0X6F 

	LDI R20, 0x01

	// VALORES INICIALES DEL RELOJ
	LDI R21, 0x09 
	LDI R22, 0x05
	LDI R23, 0x03
	LDI R24, 0x02

	//VALORES INICIALES DE LA FECHA
	LDI R25, 0x01
	LDI R26, 0x03
	LDI R27, 0x09
	LDI R19, 0x00

	//VALORES INICIALES DE LA ALARMA
	LDI R29, 0x00
	MOV R1, R29
	LDI R29, 0x00
	MOV R2, R29
	LDI R29, 0x00
	MOV R3, R29
	LDI R29, 0x00
	MOV R4, R29

	LDI R28, 0x00
	
	LDI R18, 0x02

	

	
	CALL INT_T0 //llamamos la inicializacion del timer0
	CALL INT_T1 //llamamos la inicializacion del timer1
	
//****************************************************
//Configuración LOOP
//****************************************************

LOOP:

	
	CPI R20, 0	;HORA
	BREQ MODO_HORA_1
	CPI R20, 1	;CONFIGURACIÓN DE HORA
	BREQ MODO_CONF_HORA
	CPI R20, 2	;FECHA
	BREQ MODO_FECHA_1
	CPI R20, 3	;CONFIGURACIÓN DE FECHA
	BREQ MODO_CONF_FECHA_1
	CPI R20, 4	;ALARMA
	BREQ MODO_CONF_ALARMA_1

	JMP LOOP

MODO_HORA_1:
	JMP MODO_HORA	;SALTO A LA FUNCIÓN ORIGINAL

MODO_FECHA_1:
	JMP MODO_FECHA	;SALTO A LA FUNCIÓN ORIGINAL

MODO_CONF_FECHA_1:
	JMP MODO_CONF_FECHA	;SALTO A LA FUNCIÓN ORIGINAL

MODO_CONF_ALARMA_1:
	JMP MODO_CONF_ALARMA


//****************************************************
//CONFIGURACIÓN DE HORA
//****************************************************
MODO_CONF_HORA:

	CPI UNIDAD_MIN, 10	//ANALISIS DEL VALOR DE CADA DÍGITO, PARA SABER SI HAY UN OVER FLOW. SI NO SE CUMPLE NINGUNA PARTE DE ESTAS COMPARACIONES EL CÓDIGO TRABAJA NORMAL
	BREQ MIN2_1
	CPI DECENA_MIN, 6
	BREQ HORA1_1
	CPI R23, 10
	BREQ HORA2_1
	CPI R24, 2
	BREQ REST_1

MODO_CONF_HORA_11:
	CALL DELAY
	
	LDI R16, 0b0001_0001		//ENCENDER EL TRANSISTOR DEL MULTIPLEXEADO 
	OUT PORTC, R16

	
	//TABLA DE MINUTOS, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, UNIDAD_MIN			//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16  
	
	CALL DELAY		//DELAY DE MULTIPLEXEADO
	
	LDI R16, 0b0000_0010
	OUT PORTC, R16

	//TABLA DE MINUTOS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, DECENA_MIN		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 

	CALL DELAY
	
	LDI R16, 0b0000_0100
	OUT PORTC, R16

	//TABLA DE HORAS, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R23		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY

	LDI R16, 0b0000_1000
	OUT PORTC, R16

	//TABLA DE HORAS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1) 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R24			//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY
	JMP LOOP		//SALTO AL LOOP PRINCIPAL PARA REVISAR SI NO HA CAMBIADO EL ESTADO DEL REGISTRO DE CONTROL

MIN1_1:                //CADA MINUTO SE CAMBIA EL VALOR DEL DISPLAY 1, YA QUE TIENE DEPENDENCIA DEL TIMER 1
	LDI R28, 0
	INC UNIDAD_MIN
	JMP MODO_CONF_HORA
MIN2_1:                //CADA 10 MINUTOS SE CAMBIA EL VALOR PARA PONER LAS DECENAS 
	LDI UNIDAD_MIN, 0
	INC DECENA_MIN
	JMP MODO_CONF_HORA
HORA1_1: 				// CADA 60 MINUTOS SE CAMBIA LA HORA 
	LDI DECENA_MIN, 0
	JMP MODO_CONF_HORA
HORA2_1:				//CCUANDO LLEGUE A 10 SE CAMBIAN LAS DECENAS 
	LDI R23, 0
	INC R24

	JMP MODO_CONF_HORA
REST_1:
	CPI R23, 4		//COMPARANDO SI LAS UNIDADES DE HORA SON IGUAL A 4, PARA REALIZAR EL OVER FLOW
	BREQ RESET_1
	JMP MODO_CONF_HORA_11

RESET_1:		//SI SE CUMPLE QUE QUE LAS UNIDADES DE LAS HORAS SON IGUAL A 4, SE REALIZA EL OVER FLOW DE 23 A 00

	LDI R23, 0
	LDI R24, 0
	JMP MODO_CONF_HORA_11


//****************************************************
//MODO HORA
//****************************************************


MODO_HORA:
	CP R4, R24		//SE COMPARA SI LAS DECENAS DE HORA SON IGUALES TANTO EN LA ALARMA COMO EN LA HORA, PARA REVISAR LUEGO LOS DEMÁS DÍGITOS
	BREQ SALTO_ALARMA 
	SALTO_ALARMA:
	CALL MODO_ALARMA

	CPI R28, 60			//ANALISIS DEL VALOR DE CADA DÍGITO, PARA SABER SI HAY UN OVER FLOW. SI NO SE CUMPLE NINGUNA PARTE DE ESTAS COMPARACIONES EL CÓDIGO TRABAJA NORMAL
	BREQ MIN1
	CPI UNIDAD_MIN, 10
	BREQ MIN2
	CPI DECENA_MIN, 6
	BREQ HORA1
	CPI R23, 10
	BREQ HORA2
	CPI R24, 2
	BREQ REST


MODO_HORA_11:
	
	CALL MODO_ALARMA	//SE LLAMA AL MODO ALARMA PARA VOLVER A HACER UN CHEQUEO
	CALL DELAY
	LDI R16, 0b0000_0001	//ENCENDER EL TRANSISTOR DEL MULTIPLEXEADO 
	OUT PORTC, R16

	
	//TABLA DE MINUTOS, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, UNIDAD_MIN	//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16  
	
	CALL DELAY	//DELAY DE MULTIPLEXEADO
	
	LDI R16, 0b0000_0010
	OUT PORTC, R16

	//TABLA DE MINUTOS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)	//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	ADD ZL, DECENA_MIN
	LPM R16, Z
	OUT PORTD, R16 

	CALL DELAY	//DELAY DE MULTIPLEXEADO
	
	LDI R16, 0b0000_0100
	OUT PORTC, R16

	//TABLA DE HORAS, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	ADD ZL, R23
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY		//DELAY DE MULTIPLEXEADO

	LDI R16, 0b0000_1000
	OUT PORTC, R16

	//TABLA DE HORAS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1) 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R24		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY	//DELAY DE MULTIPLEXEADO
	JMP LOOP
MIN1:                //CADA MINUTO SE CAMBIA EL VALOR DEL DISPLAY 1, TIENE DEPENDENCIA DEL TIMER 1
	LDI R28, 0
	INC UNIDAD_MIN
	JMP MODO_HORA
MIN2:                //CADA 10 MINUTOS SE CAMBIA EL VALOR PARA PONER LAS DECENAS 
	LDI UNIDAD_MIN, 0
	INC DECENA_MIN
	JMP MODO_HORA
HORA1: 				// CADA 60 MINUTOS SE CAMBIA LA HORA 
	LDI DECENA_MIN, 0
	INC R23
	JMP MODO_HORA
HORA2:				//CUANDO LLEGUE A 10 SE CAMBIAN LAS DECENAS 
	LDI R23, 0
	INC R24
	JMP MODO_HORA
REST:
	CPI R23, 4
	BREQ RESET
	JMP MODO_HORA_11
RESET: 
	LDI UNIDAD_MIN, 0		//EXISTE DEPENDENCIA 
	LDI DECENA_MIN, 0
	LDI R23, 0
	LDI R24, 0
	INC R25		//ASÍ MISMO, CUANDO SE HAGA EL OVER FLOW DE 23:59 A 00:00 SE AUMENTAN LAS UNIDADES DE DÍA 
	JMP MODO_HORA


//****************************************************
//MODO FECHA
//****************************************************


MODO_FECHA:
	CPI R25, 10		//COMPARACIONES PARA CADA DÍGITO DE LA FECHA PARA REVISAR SI EXISTE UN OVER FLOW
	BREQ DIA1
	CPI R26, 3
	BREQ DIA2
	CPI R27, 10
	BREQ MES1
	CPI R19, 0
	BREQ MES2_EN_0
	CPI R19, 1
	BREQ MES2_EN_1


MODO_FECHA_11:
	CALL DELAY		//DELAY DE MULTIPLEXEADO
	LDI R16, 0b0010_0100		//ENCENDER EL TRANSISTOR DEL MULTIPLEXEADO 
	OUT PORTC, R16

	
	//TABLA DE DÍA, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R25	//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16  
	
	CALL DELAY
	
	LDI R16, 0b0000_1000
	OUT PORTC, R16

	//TABLA DE DÍA, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R26		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 

	CALL DELAY
	
	LDI R16, 0b0000_0001
	OUT PORTC, R16

	//TABLA DE MES, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R27		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY

	LDI R16, 0b0000_0010
	OUT PORTC, R16

	//TABLA DE MES, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1) 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R19		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY
	JMP LOOP

DIA1:                //CADA 10 CAMBIA EL VALOR DE LAS DECENAS DE DÍA
	LDI R25, 0
	INC R26
	JMP MODO_FECHA
DIA2:                //CADA 31 DÍA CAMBIA EL VALOR DE LA UNIDAD DE MESES
	CPI R25, 2
	BRNE MODO_FECHA_11

	LDI R25, 1
	LDI R26, 0
	INC R27		//SE INCREMENTA EL VALOR DE LAS UNIDADES DE LOS MESES
	JMP MODO_FECHA

MES1: 				// CADA 10 MESES CAMBIA EL VALOR DE LA DECENA DE MESES 
	LDI R27, 0
	INC R19
	JMP MODO_FECHA
MES2_EN_0:				//CUANDO LLEGUE AL MES 13 SE HACE UN RESET DE LOS MESES, ES DECIR, DE 12 PASA A 01
	CPI R27, 10
	BRNE MODO_FECHA_11
	LDI R27, 0
	LDI R19, 1
	JMP MODO_FECHA

MES2_EN_1:	
	CPI R27, 3
	BRNE MODO_FECHA_11
	LDI R27, 1
	LDI R19, 0
	JMP MODO_FECHA


//****************************************************
//MODO CONFIGURACIÓN DE FECHA
//****************************************************

MODO_CONF_FECHA:
	CPI R25, 10		//COMPARACIONES PARA CADA DÍGITO DE LA FECHA PARA REVISAR SI EXISTE UN OVER FLOW
	BREQ DIA1_1
	CPI R26, 3
	BREQ DIA2_1
	CPI R27, 10
	BREQ MES1_1
	CPI R19, 1
	BREQ MES2_1


MODO_CONF_FECHA_11:
	CALL DELAY		//DELAY DE MULTIPLEXEADO
	LDI R16, 0b0011_0100		//ENCENDER EL TRANSISTOR DEL MULTIPLEXEADO 
	OUT PORTC, R16


	
	//TABLA DE DÍA, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R25		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16  
	
	CALL DELAY		//DELAY DE MULTIPLEXEADO
	
	LDI R16, 0b0000_1000
	OUT PORTC, R16

	//TABLA DE DÍA, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	ADD ZL, R26
	LPM R16, Z
	OUT PORTD, R16 

	CALL DELAY		//DELAY DE MULTIPLEXEADO
	
	LDI R16, 0b0000_0001
	OUT PORTC, R16

	//TABLA DE MES, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)		
	ADD ZL, R27		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY		//DELAY DE MULTIPLEXEADO

	LDI R16, 0b0000_0010
	OUT PORTC, R16

	//TABLA DE MES, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1) 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R19		//SE SUMA EL VALOR QUE TENGA DICHO REGISTRO PARA PODER CAGARLO Y MOSTRARLO EN EL DISPLAY
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY			//DELAY DE MULTIPLEXEADO
	JMP LOOP

DIA1_1:                //CADA MINUTO SE CAMBIA EL VALOR DEL DISPLAY 1
	LDI R25, 0
	INC R26
	JMP MODO_CONF_FECHA
DIA2_1:                //SE TRABAJA DE FORMA INDEPENDIENTE LOS DÍAS Y LOS MESES
	CPI R25, 2
	BRNE MODO_CONF_FECHA_11

	LDI R25, 1
	LDI R26, 0
	JMP MODO_CONF_FECHA

MES1_1: 				// CADA 60 MINUTOS SE CAMBIA LA HORA 
	CPI R27, 10
	BRNE MODO_CONF_FECHA
	LDI R27, 0
	INC R19
	JMP MODO_CONF_FECHA
MES2_1:				//CCUANDO LLEGUE A 10 SE CAMBIAN LAS DECENAS 
	CPI R27, 3
	BRNE MODO_CONF_FECHA_11
	LDI R27, 0
	LDI R19, 1
	JMP MODO_CONF_FECHA

//****************************************************
//MODO  DE ALARMA
//****************************************************
RETORNO:
	RET

MODO_ALARMA:

ALARMITAAAA:
	
	CBI PORTB, 5		//SE COMPARA CADA VALOR DE LA HORA, SI UNO NO CUMPLE NO ENCIENDE LA LED Y SE RETORNA A DONDE FUE LLAMADO
	CP R4, R24
	BRNE RETORNO
	CP R3, R23
	BRNE RETORNO
	CP R2, R22
	BRNE RETORNO
	CP R1, R21
	BRNE RETORNO



	SBI PORTB, 5		//SI TODOS SON IGUALES SE ENCIENDE EL LED INDICADOR QUE FUNCIONA LA ALARMA

	CALL DELAY

MODO_ALARMA_11:
	CBI PORTB, 5
	CALL DELAY
	LDI R16, 0b0000_0001
	OUT PORTC, R16

	
	//TABLA DE MINUTOS, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R1
	LPM R16, Z
	OUT PORTD, R16  
	
	CALL DELAY
	
	LDI R16, 0b0000_0010
	OUT PORTC, R16

	//TABLA DE MINUTOS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R2
	LPM R16, Z
	OUT PORTD, R16 

	CALL DELAY
	
	LDI R16, 0b0000_0100
	OUT PORTC, R16

	//TABLA DE HORAS, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R3
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY

	LDI R16, 0b0000_1000
	OUT PORTC, R16

	//TABLA DE HORAS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1) 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R4
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY
	JMP ALARMITAAAA		//SALTA AL LOOP DE ALARMA



//****************************************************
//CONFIGURACIÓN DE ALARMA
//****************************************************
MODO_CONF_ALARMA:
	MOV R29, R1
	CPI R29, 10
	BREQ MIN2_1_ALARMA

	MOV R29, R2
	CPI R29, 6
	BREQ HORA1_1_ALARMA

	MOV R29, R3
	CPI R29, 10
	BREQ HORA2_1_ALARMA

	MOV R29, R4
	CPI R24, 2
	BREQ REST_1_ALARMA

MODO_CONF_ALARMA_11:
	CALL DELAY
	
	LDI R16, 0b0001_0001
	OUT PORTC, R16

	
	//TABLA DE MINUTOS, PRIMER DÍGITO
	
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R1
	LPM R16, Z
	OUT PORTD, R16  
	
	CALL DELAY
	
	LDI R16, 0b0000_0010
	OUT PORTC, R16

	//TABLA DE MINUTOS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R2
	LPM R16, Z
	OUT PORTD, R16 

	CALL DELAY
	
	LDI R16, 0b0000_0100
	OUT PORTC, R16

	//TABLA DE HORAS, PRIMER DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1)  //se va a buscar detro de la tabla el valor que se desplegara en las decenas 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R3
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY

	LDI R16, 0b0000_1000
	OUT PORTC, R16

	//TABLA DE HORAS, SEGUNDO DÍGITO
	LDI ZH, HIGH(TABLA7SEG << 1) 
	LDI ZL, LOW(TABLA7SEG << 1)
	ADD ZL, R4
	LPM R16, Z
	OUT PORTD, R16 
	
	CALL DELAY
	JMP LOOP

MIN1_1_ALARMA:                //CADA MINUTO SE CAMBIA EL VALOR DEL DISPLAY 1
	LDI R28, 0
	INC R1
	JMP MODO_CONF_HORA

MIN2_1_ALARMA:                //CADA 10 MINUTOS SE CAMBIA EL VALOR PARA PONER LAS DECENAS 
	LDI R29, 0
	MOV R1, R29		;CARGO EL NUEVO VALOR DE R1
	INC R2			; INCREMENTAR VALOR DE DECENAS DE MINUTO
	JMP MODO_CONF_ALARMA

	
HORA1_1_ALARMA: 				// CADA 60 MINUTOS SE CAMBIA LA HORA 
	LDI R29, 0		;YA TIENE CARGADO EL VALOR DE R2
	MOV R2, R29
	JMP MODO_CONF_HORA

HORA2_1_ALARMA:				//CUANDO LLEGUE A 10 SE CAMBIAN LAS DECENAS 
	LDI R29, 0		;YA TIENE CARGADO EL VALOR DE R3
	MOV R3, R29		;CARGO EL NUEVO VALOR DE R3
	INC R4			;INCREMENTAR EL VALOR DE LAS DECENAS DE HORA

	JMP MODO_CONF_ALARMA
REST_1_ALARMA:
	MOV R29, R3		;R29 TIENE ANTERIORMENTE CARGADO EL VALOR DE R4, POR ESO SE HACE UN MOV
	CPI R29, 4		; COMPARAR LAS UNIDADES DE HORA
	BREQ RESET_1_ALARMA
	MOV R29, R4		;DEVUELVO EL VALOR QUE TENÍA ANTERIORMENTE R4 PARA SEGUIR TRABAJANDO
	JMP MODO_CONF_ALARMA_11

RESET_1_ALARMA: 
	LDI R29, 0
	MOV R3, R29
	MOV R4, R29
	JMP MODO_CONF_ALARMA_11






	
//****************************************************
//DELAYS
//****************************************************
DELAY:              //DELAY PARA MULTIPLEXACIÓN
	LDI R16, 255
DELAY1:
	DEC R16
	BRNE DELAY1 
	LDI R16, 255
DELAY2:
	DEC R16
	BRNE DELAY2
	LDI R16, 255
DELAY3:
	DEC R16
	BRNE DELAY3
	LDI R16, 255
DELAY4:
	DEC R16
	BRNE DELAY4

	RET


//****************************************************
//Subrutina 
//****************************************************
INT_PC:
	PUSH R16		//guardamos el valor de R16
	IN R16, SREG
	PUSH R16
	PUSH R29

	IN R16, PINB     //los valores del puerto B los almacenamos en R18
	SBRS R16, PB4		//analisis de los botones para aumentar conteo de leds Y AUMENTO  
	INC R20
	CPI R20, 5	// OVER FLOW DEL REGISTRO DE CONTROL DE ESTADOS
	BRNE MODO_ESTADO
	LDI R20, 0	//SE CARGA 0 POR SER OVER FLOW

MODO_ESTADO:	//SE COMPARA QUE VALOR TIENE EL REGISTRO DEL CONTROL DE ESTADO PARA MANDARLO A LA INTERRUPCIÓN DEBIDA 
	CPI R20, 1	//SI ES IGUAL A 1, SE TRABAJA LA CONFIGURACIÓN DE HORA
	BREQ MODO1_CONF_HORA
	CPI R20, 2		
	BREQ SALTO_SALIDA
	CPI R20, 3	//SI ES IGUAL A 3, SE REALIZA UN SALTO AL SUB MÓDULO SALTO_MODO3, YA QUE EL BRANCH NO PUEDE IR HASTA EL MÓDULO "ORIGINAL"
	BREQ SALTO_MODO3
	CPI R20, 4	//SI ES IGUAL A 5, SE REALIZA UN SALTO AL SUB MÓDULO SALTO_MODO5, YA QUE EL BRANCH NO PUEDE IR HASTA EL MÓDULO "ORIGINAL"
	BREQ SALTO_MODO5	
	JMP SALIR	//SE REALIZA UN JMP A SALIR POR SI NO LLEGASE A CUMPLIR CON NINGUN MODO

SALTO_MODO3:
	JMP MODO3_CONF_FECHA	//SALTO A LA FUNCIÓN "ORIGINAL" DEL MODO3_CONF_FECHA

SALTO_MODO5:
	JMP MODO5_CONF_ALARMA	//SALTO A LA FUNCIÓN "ORIGINAL" DEL MODO5_CONF_ALARMA


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//**************************************************** MODO 1 ****************************************************
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MODO1_CONF_HORA:
	PUSHBUTTON_0: //ANÁLISIS DEL PRIMER BOTON
		SBRS R16, PB0		//SI ESTÁ PRESIONADO EL PRIMER PUSH, SE HARÁ UN INCREMENTO DE LAS UNIDADES DE MINUTOS
		JMP PUSHBUTTON_1
		INC UNIDAD_MIN

	PUSHBUTTON_1: //ANÁLISIS DEL SEGUNDO BOTON
		SBRS R16, PB1		//SI ESTÁ PRESIONADO EL SEGUNDO PUSH, SE HARÁ UN DECREMENTO DE LAS UNIDADES DE MINUTOS
		JMP PUSHBUTTON_2
		DEC UNIDAD_MIN
		CPI UNIDAD_MIN, -1		//SI LAS UNIDADES DE MINUTOS SON NEGATIVAS, SE HACE EL UNDERFLOW DE ELLOS
		BRNE PUSHBUTTON_2		// sI NO SON NEGATIVAS SOLO PASA A REVISAR EL TERCER PUSH
		LDI UNIDAD_MIN, 9		//UNDER FLOW, DE 0 PASA A 9 LAS UNIDADES DE MINUTO
		DEC DECENA_MIN			//A SU VEZ, SE DECREMENTAN EL VALOR DE LAS DECENAS DE MINUTOS
		CPI DECENA_MIN, -1		//SI SON NEGATIVAS LAS DECENAS DE MINUTO, SE CARGARÁ 5. EN ESTE CASO ES EL UNDER FLOW DE 00 A 59
		BRNE SALTO_SALIDA
		LDI DECENA_MIN, 5
		JMP PUSHBUTTON_2


	PUSHBUTTON_2: //ANÁLISIS DEL TERCER BOTON
		SBRS R16, PB2		//SI ESTÁ PRESIONADO EL TERCER PUSH, SE INCREMENTAN LAS UNIDADES DE HORA
		JMP PUSHBUTTON_3
		INC R23

	PUSHBUTTON_3: //ANÁLISIS DEL CUARTO BOTON
		SBRS R16, PB3		//SI ESTÁ PRESIONADO EL CUARTO PUSH, SE HARÁ UN DECREMENTO DE LAS UNIDADES DE HORAS
		JMP SALIR
		DEC R23
		CPI R23, -1			//SI SON NEGATIVAS LAS UNIDADES DE HORA, SE DECREMENTARÁ LAS DECENAS DE HOR
		BRNE SALTO_SALIDA
		DEC R24

		CPI R24, 1		//DEPENDIENDO DEL VALOR DE LAS DECENAS DE HORA, HABRÁN UNDER FLOW DISTINTOS. SE ANALIZA QUE VALOR TIENEN LAS DECENAS DE HORA PARA HACER EL RESPECTIVO UNDER FLOW
		BREQ HORAS_EN_1
		CPI R24, 0
		BREQ HORAS_EN_0
		CPI R24, -1
		BREQ HORAS_EN_NEG
		JMP SALIR

SALTO_SALIDA:
	JMP SALIR

//UNDERFLOW DE HORAS
	HORAS_EN_1:		//SI LAS DECENAS SON IGUAL A 1, LAS UNIDADES DE HORA SERÁN IGUAL A  9
		LDI R23, 10
		JMP PUSHBUTTON_0

	HORAS_EN_0:		//SI LAS DECENAS SON IGUAL A 0, LAS UNIDADES DE HORA SERÁN IGUAL A  9
		LDI R23, 10
		JMP PUSHBUTTON_0

	HORAS_EN_NEG:		//SI LAS DECENAS SON NEGATIVAS, LAS UNIDADES DE HORA SERÁN IGUAL A  3 Y LAS DECENAS PASAN A SER IGUAL A 2
		LDI R23, 4
		LDI R24, 2
		JMP PUSHBUTTON_0
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//**************************************************** MODO 3 ****************************************************
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MODO3_CONF_FECHA:

	PUSHBUTTON_0_FECHA: //ANÁLISIS DEL PRIMER BOTON
			SBRS R16, PB0
			JMP PUSHBUTTON_1_FECHA
			INC DIA_UNIDAD		//SI SE PRESIONA EL PRIMER PUSH, INCREMENTAN LAS UNIDADES DE DIAS. SI NO SE PRESIONA REVISA VA A REVISAR EL SIGUIENTE BOTÓN

	PUSHBUTTON_1_FECHA: //ANÁLISIS DEL SEGUNDO BOTON
		SBRS R16, PB1
		JMP PUSHBUTTON_2_FECHA
				
		DEC DIA_UNIDAD		//SI SE PRESIONA EL SEGUNDO PUSH, DECREMENTAN LAS UNIDADES DE DIAS. SI NO SE PRESIONA REVISA VA A REVISAR EL SIGUIENTE BOTÓN

		CPI DIA_DECENA, 3	//SI LAS DECENAS DEL DIA SON IGUAL A 3, SE VA AL MÓDULO DE "DIASDECENAS_EN_3". SI NO, SE VA A LA SIGUIENTE COMPARACIÓN
		BREQ DIASDECENAS_EN_3

		CPI DIA_DECENA, 2	//SI LAS DECENAS DEL DIA SON IGUAL A 2, SE VA AL MÓDULO DE "DIASDECENAS_EN_2". SI NO, SE VA A LA SIGUIENTE COMPARACIÓN
		BREQ DIASDECENAS_EN_2

		CPI DIA_DECENA, 1	//SI LAS DECENAS DEL DIA SON IGUAL A 1, SE VA AL MÓDULO DE "DIASDECENAS_EN_1". SI NO, SE VA A LA SIGUIENTE COMPARACIÓN
		BREQ DIASDECENAS_EN_1

		CPI DIA_DECENA, 0	//SI LAS DECENAS DEL DIA SON IGUAL A 0, SE VA AL MÓDULO DE "DIASDECENAS_EN_0". SI NO, SE VA SE VA A REVISAR EL SIGUIENTE PUSH
		BREQ DIASDECENAS_EN_0

		JMP PUSHBUTTON_2_FECHA


	PUSHBUTTON_2_FECHA: //ANÁLISIS DEL TERCER BOTON
		SBRS R16, PB2	
		JMP PUSHBUTTON_3_FECHA
		INC MES_UNIDAD		//SI EL TERCER PUSH SE PRESIONA, INCREMENTAN LAS UNIDADES DEL MES. SI NO, SE VA A REVISAR EL CUARTO PUSH

	PUSHBUTTON_3_FECHA: //ANÁLISIS DEL CUARTO BOTON
		SBRS R16, PB3
		JMP SALIR

		DEC MES_UNIDAD	//SI EL CUARTO PUSH SE PRESIONA, DECREMENTAN LAS UNIDADES DEL MES. SI NO, SE VA A REVISAR EL CUARTO PUSH

		CPI MES_DECENA, 1	//SI LAS DECENAS DEL MES SON IGUAL A 1, SE VA AL MÓDULO DE "MESDECENAS_EN_1". SI NO, SE VA A LA SIGUIENTE COMPARACIÓN
		BREQ MESDECENA_EN_1

		CPI MES_DECENA, 0	//SI LAS DECENAS DEL MES SON IGUAL A 0, SE VA AL MÓDULO DE "MESDECENAS_EN_0". SI NO, SALE DE LA INTERRUPCIÓN
		BREQ MESDECENA_EN_0
		JMP SALIR

		

//**************************************************** REVISIÓN DE DECENAS DE DÍAS ****************************************************
	DIASDECENAS_EN_3:		//SI LAS DECENAS DE LOS DÍAS ES IGUAL A 3 Y SE PRODUCE UN UDERFLOW, ENTONCES SE HACE UN SALTO A LA FUNCIÓN "UNDER_2", LA CUAL PASARÁ DE 30 A 29
		CPI DIA_UNIDAD, -1
		BREQ UNDER_2
		JMP PUSHBUTTON_2_FECHA	//SI AÚN NO SE PRODUCIRÁ UN UNDER FLOW, SE SALTA A LA REVISIÓN DEL SIGUIENTE BOTÓN

	DIASDECENAS_EN_2:
		CPI DIA_UNIDAD, -1	//SI LAS DECENAS DE LOS DÍAS ES IGUAL A 2 Y SE PRODUCE UN UDERFLOW, ENTONCES SE HACE UN SALTO A LA FUNCIÓN "UNDER_1", LA CUAL PASARÁ DE 20 A 19
		BREQ UNDER_1
		JMP PUSHBUTTON_2_FECHA	//SI AÚN NO SE PRODUCIRÁ UN UNDER FLOW, SE SALTA A LA REVISIÓN DEL SIGUIENTE BOTÓN
	
	DIASDECENAS_EN_1:
		CPI DIA_UNIDAD, -1	//SI LAS DECENAS DE LOS DÍAS ES IGUAL A 1 Y SE PRODUCE UN UDERFLOW, ENTONCES SE HACE UN SALTO A LA FUNCIÓN "UNDER_0", LA CUAL PASARÁ DE 10 A 09
		BREQ UNDER_0
		JMP PUSHBUTTON_2_FECHA	//SI AÚN NO SE PRODUCIRÁ UN UNDER FLOW, SE SALTA A LA REVISIÓN DEL SIGUIENTE BOTÓN

	DIASDECENAS_EN_0:
		CPI DIA_UNIDAD, 0	//SI LAS DECENAS DE LOS DÍAS ES IGUAL A 0 Y SE PRODUCE UN UDERFLOW, ENTONCES SE HACE UN SALTO A LA FUNCIÓN "UNDER_NEG", LA CUAL PASARÁ DE 01 A 31
		BREQ UNDER_NEG
		JMP PUSHBUTTON_2_FECHA	//SI AÚN NO SE PRODUCIRÁ UN UNDER FLOW, SE SALTA A LA REVISIÓN DEL SIGUIENTE BOTÓN

		
//**************************************************** REVISIÓN DE DECENAS DE MESES ****************************************************
	MESDECENA_EN_1:
		CPI MES_UNIDAD, -1	//SI LAS DECENAS DE LOS MESES ES IGUAL A 1 Y SE PRODUCE UN UDERFLOW, ENTONCES SE HACE UN SALTO A LA FUNCIÓN "UNDER_0_FECHA", LA CUAL PASARÁ DE 10 A 09 LOS MESES
		BREQ UNDER_0_FECHA
		JMP SALIR	//SI NO SE PRODUCE UN UNDER FLOW, SALE DE LA INTERRUPCIÓN

	MESDECENA_EN_0:
		CPI MES_UNIDAD, 0	//SI LAS DECENAS DE LOS MESES ES IGUAL A 0 Y SE PRODUCE UN UDERFLOW, ENTONCES SE HACE UN SALTO A LA FUNCIÓN "UNDER_NEG_FECHA", LA CUAL PASARÁ DE 01 A 12 LOS MESES
		BREQ UNDER_NEG_FECHA
		JMP SALIR	//SI NO SE PRODUCE UN UNDER FLOW, SALE DE LA INTERRUPCIÓN

//**************************************************** UNDER FLOWS DE DÍAS  ****************************************************

	UNDER_2:
		LDI DIA_UNIDAD, 9	//LOS DÍAS PASAN DE 30 A 29 POR MEDIO DEL UNDERFLOW
		LDI DIA_DECENA, 2
		JMP PUSHBUTTON_2_FECHA

	UNDER_1:
		LDI DIA_UNIDAD, 9	//LOS DÍAS PASAN DE 20 A 19 POR MEDIO DEL UNDERFLOW
		LDI DIA_DECENA, 1
		JMP PUSHBUTTON_2_FECHA
	
	UNDER_0:
		LDI DIA_UNIDAD, 9	//LOS DÍAS PASAN DE 10 A 09 POR MEDIO DEL UNDERFLOW
		LDI DIA_DECENA, 0
		JMP PUSHBUTTON_2_FECHA

	UNDER_NEG:
		LDI DIA_UNIDAD, 1	//LOS DÍAS PASAN DE 01 A 31 POR MEDIO DEL UNDERFLOW
		LDI DIA_DECENA, 3
		JMP PUSHBUTTON_2_FECHA

//**************************************************** UNDER FLOWS DE MESES  ****************************************************
	UNDER_0_FECHA:
		LDI MES_UNIDAD, 9	//LOS MESES PASAN DE 10 A 09 POR MEDIO DEL UNDERFLOW
		LDI MES_DECENA, 0
		JMP SALIR

	UNDER_NEG_FECHA:		//LOS MESES PASAN DE 01 A 12 POR MEDIO DEL UNDERFLOW
		LDI MES_UNIDAD, 2
		LDI MES_DECENA, 1
		JMP SALIR

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//**************************************************** MODO 5 ****************************************************
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MODO5_CONF_ALARMA:
	SBRS R16, PB0		//REVISIÓN PARA SABER SI ESTÁ SIENDO PRESIONADO ALGÚN BOTÓN
	JMP PUSHBUTTON_0_ALARMA
	SBRS R16, PB1
	JMP PUSHBUTTON_1_ALARMA
	SBRS R16, PB2
	JMP PUSHBUTTON_2_ALARMA
	SBRS R16, PB3
	JMP PUSHBUTTON_3_ALARMA
	JMP SALIR
	
	PUSHBUTTON_0_ALARMA: //ANÁLISIS DEL PRIMER BOTON
		INC R1	//SI SE PRESIONA EL PRIMER PUSH, SE INCREMENTAN LAS UNIDADES DE LOS MINUTOS DE LA ALARMA
		JMP SALIR	//LUEGO SALE DE LA INTERRUPCIÓN

	PUSHBUTTON_1_ALARMA: //ANÁLISIS DEL SEGUNDO BOTON
		DEC R1	//SI SE PRESIONA EL SEGUNDO PUSH, SE DECREMENTAN LAS UNIDADES DE LOS MINUTOS DE LA ALARMA
		MOV R29, R1			;MOVER EL VALOR DE R1 A R29 PARA TRABAJAR INMEDIATOS
		CPI R29, -1		//SE COMPARA PARA VER SI EXISTEN UN UNDERFLOW
		BRNE PUSHBUTTON_2_ALARMA	//SI NO EXISTE UNDERFLOW, VA A REVISAR EL SIGUIENTE BOTÓN
		LDI R29, 9	//SE CARGA EL VALOR DE 9 Y SE COPIA AL REGISTRO DE LAS UNIDADES DE LOS MINUTOS
		MOV R1, R29

		DEC R2	//SI EXISTIÓ UN UNDERFLOW, DE IGUAL MANERA SE DEBEN DECREMENTAR EL VALOR DE LAS DECENAS DE MINUTOS	
		MOV R29, R2	//MOVER EL VALOR DE R2 A R29 PARA TRABAJAR CON INMEDIATOS
		CPI R29, -1		//SI EXISTE UNDERFLOW EN LAS DECENAS SE TRABAJA ESA PARTE DEL CÓDIGO, SI NO, SALE DE LA INTERRUPCIÓN
		BRNE SALTO_SALIDA_ALARMA
		LDI R29, 5	//SE CARGA EL VALOR DE 5 A R29 Y SE MUEVE A R2
		MOV R2, R29
		JMP SALIR	//LUEGO SALE DE LA INTERRUPCIÓN

	PUSHBUTTON_2_ALARMA: //ANÁLISIS DEL TERCER BOTON

		INC R3	//SI SE PRESIONA EL TERCER PUSH, SE INCREMENTAN LAS UNIDADES DE LAS HORAS DE LA ALARMA
		JMP SALIR	//LUEGO SALE DE LA INTERRUPCIÓN

	PUSHBUTTON_3_ALARMA: //ANÁLISIS DEL CUARTO BOTON
		DEC R3	//SI SE PRESIONA EL CUARTO PUSH, SE DECREMENTAN LAS UNIDADES DE LAS HORAS DE LA ALARMA
		
		MOV R29, R3	//MOVER EL VALOR DE R3 A R29 PARA TRABAJAR CON INMEDIATOS
		CPI R29, -1	//SE COMPARA PARA VER SI EXISTEN UN UNDERFLOW
		MOV R3, R29	//SE DEVULEVE DICHO VALOR A R3

		DEC R4	//SI EXISTIÓ UN UNDERFLOW, DE IGUAL MANERA SE DEBEN DECREMENTAR EL VALOR DE LAS DECENAS DE HORAS	
		MOV R29, R4	//MOVER EL VALOR DE R4 A R29 PARA TRABAJAR CON INMEDIATOS
		CPI R29, 1	//SE COMPARA PARA VER QUE VALOR TIENE LAS DECENAS DE HORAS, YA QUE, DEPENDIENDO DE ESO, SE PRODUCE UN UNDERFLOW DISTINTIO
		BREQ HORAS_EN_1_ALARMA
		CPI R29, 0
		BREQ HORAS_EN_0_ALARMA
		CPI R29, -1
		BREQ HORAS_EN_NEG_ALARMA
		
		JMP SALIR	//LUEGO SALE DE LA INTERRUPCIÓN



SALTO_SALIDA_ALARMA:
	JMP SALIR	//SALTO A LA SALIDA DE LA INTERRUPCIÓN 


//UNDERFLOW DE HORAS EN LA ALARMA
	HORAS_EN_1_ALARMA:		//DEPENDIENDO EL VALOR QUE TENGO R29 SE COPIA A R4
		MOV R4, R29		//SE COPIA EL VALOR DE R3 A R29 PARA TRABAJAR INDEMIATOS
		MOV R29, R3
		LDI R29, 10
		MOV R3, R29		//SE DEVUELVE UN VALOR NUEVO A R3
		JMP PUSHBUTTON_0_ALARMA		//SE LEE EL PRIMER PUSH

	HORAS_EN_0_ALARMA:
		MOV R4, R29		//ESTA PARTE DE CÓDIGO, ES EXACTAMENTE LA MISMA QUE LA DE "HORAS_EN_1_ALARMA"
		MOV R29, R3
		LDI R29, 10
		MOV R3, R29
		JMP PUSHBUTTON_0_ALARMA	//SE LEE EL PRIMER PUSH

	HORAS_EN_NEG_ALARMA:
		LDI R29, 2	//EL UNDERFLOW PARA QUE PASE DE 00 A 23 HORAS
		MOV R4, R29
		LDI R29, 3
		MOV R3, R29
			
		JMP PUSHBUTTON_0_ALARMA	//SE LEE EL PRIMER PUSH

		




//**************************************************** SALIDA DE LA INTERRUPCIÓN  ****************************************************
SALIR:

	SBI PCIFR, PCIF0

	POP R29		//DEVOLVER EL VALOR DE R29 ANTES DE HABER ENTRADO A LA INTERRUPCIÓN
	POP R16
	OUT SREG, R16
	POP R16          //Devolvemos el valor antes guardado de R16
	
	RETI            //retorno de interrupcion 

INT_T1:
	LDI R16, 0
	STS TCCR1A, R16   //INICIAR TIMER 1 COMO CONTADOR
	
	LDI R16, (1<<CS02) | (1<<CS00)     //PREESCALER A 1024
	STS TCCR1B, R16       
	
	LDI R16, 0xE1
	STS TCNT1H, R16
	LDI R16, 0x7B
	STS TCNT1L, R16

	LDI R16, (1<<TOIE1)   //MASCARA TIMER 1
	STS TIMSK1, R16

	RET

INT_TIMER1:
	PUSH R18        //GUARDAR VALORES DE R16 EN LA PILA
 	IN R18, SREG
	PUSH R18
     
	LDI R17, 0xE1    
	STS TCNT1H, R17
	LDI R17, 0x7B      
	STS TCNT1L, R17   
	SBI TIFR1, TOV1
	
	INC R28         

	POP R18
	OUT SREG, R18  
	POP R18         //DEVOLVER VALORES ANTERIORES DE R16

	RETI		   //RETORNO DE INTERRUPCION

INT_T0:
	LDI R16, 0
	OUT TCCR0A, R16      //inicializacion de timer 0 como contador 
	
	LDI R16, (1<<CS02) | (1<<CS00)     //seleccion de prescaler de 1024 
	OUT TCCR0B, R16       
	
	LDI R16, 100          //valor de conteo inicial 
	OUT TCNT0, R16

	LDI R16, (1<<TOIE0)   //mascara del timer0
	STS TIMSK0, R16

	RET

INT_TIMER0:
	PUSH R16        //guardamos el valor de R25
 	IN R16, SREG
	PUSH R16

	LDI R16, 177		//VALOR OBTENIDO PARA PODER TRABAJAR EL TIMER 0 Y CUENTE CADA 50 ms
	OUT TCNT0, R16     
	SBI TIFR0, TOV0
	
	INC R7           //realizamos el incremento en las unidades en cada interrupcion del timer0

	LDI R16, 50
	SUB R16, R7 
	BRNE SALIR
	CLR R7
	SBI PIND, PD7
	RETI
	


//****************************************************