
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00000844  000008d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800196  00800196  0000096e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fc  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000706  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000393  00000000  00000000  00001a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f2  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015a  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 39       	cpi	r26, 0x96	; 150
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e9       	ldi	r26, 0x96	; 150
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 39       	cpi	r26, 0x99	; 153
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  9e:	0c 94 20 04 	jmp	0x840	; 0x840 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
	}
}

void initUART9600(void)
{
	UBRR0 = 103;  // Configurar el registro UBRR0 para 9600 bps con F_CPU de 16MHz.
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);  // Habilitar receptor, transmisor y la interrupción de recepción completa.
  b2:	88 e9       	ldi	r24, 0x98	; 152
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // Configurar formato de 8 bits de datos, sin paridad y 1 bit de parada.
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  be:	08 95       	ret

000000c0 <writeTextUART>:
}

void writeTextUART(const char* Texto)
{
  c0:	fc 01       	movw	r30, r24
	while (*Texto) // Mientras haya caracteres por enviar.
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <writeTextUART+0x12>
	{
		while (!(UCSR0A & (1 << UDRE0))); // Esperar a que el buffer de transmisión esté vacío.
  c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	95 ff       	sbrs	r25, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <writeTextUART+0x4>
		UDR0 = *Texto++; // Enviar el siguiente caracter.
  cc:	31 96       	adiw	r30, 0x01	; 1
  ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // Configurar formato de 8 bits de datos, sin paridad y 1 bit de parada.
}

void writeTextUART(const char* Texto)
{
	while (*Texto) // Mientras haya caracteres por enviar.
  d2:	80 81       	ld	r24, Z
  d4:	81 11       	cpse	r24, r1
  d6:	f6 cf       	rjmp	.-20     	; 0xc4 <writeTextUART+0x4>
	{
		while (!(UCSR0A & (1 << UDRE0))); // Esperar a que el buffer de transmisión esté vacío.
		UDR0 = *Texto++; // Enviar el siguiente caracter.
	}
}
  d8:	08 95       	ret

000000da <writeUART>:

void writeUART(char Caracter)
{
	while (!(UCSR0A & (1 << UDRE0))); // Esperar a que el buffer de transmisión esté vacío.
  da:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  de:	95 ff       	sbrs	r25, 5
  e0:	fc cf       	rjmp	.-8      	; 0xda <writeUART>
	UDR0 = Caracter; // Enviar el caracter.
  e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e6:	08 95       	ret

000000e8 <initADC>:
}

void initADC(void)
{
	// Configurar el ADC para usar AVCC como referencia y ajustar el resultado a la derecha.
	ADMUX = (1 << REFS0) | 7; // Seleccionar ADC7 como entrada.
  e8:	87 e4       	ldi	r24, 0x47	; 71
  ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Habilitar el ADC, su interrupción y establecer el preescalado a 128 para un reloj de ADC adecuado.
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ee:	8f e8       	ldi	r24, 0x8F	; 143
  f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f4:	08 95       	ret

000000f6 <setupPorts>:
}

void setupPorts(void)
{
	DDRB = 0xFF;  // Configurar todos los pines del puerto B como salidas.
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;  // Configurar todos los pines del puerto C como salidas.
  fa:	87 b9       	out	0x07, r24	; 7
  fc:	08 95       	ret

000000fe <main>:
void writeTextUART(const char* Texto);
void initADC(void);
void setupPorts(void);

int main(void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	6e 97       	sbiw	r28, 0x1e	; 30
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
	initUART9600(); // Inicializar UART a 9600 bps.
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	initADC(); // Inicializar el ADC.
 116:	0e 94 74 00 	call	0xe8	; 0xe8 <initADC>
	setupPorts(); // Configurar puertos B y C como salidas.
 11a:	0e 94 7b 00 	call	0xf6	; 0xf6 <setupPorts>
	sei();  // Habilitar interrupciones globales.
 11e:	78 94       	sei

	while (1) // Bucle principal infinito.
	{
		writeTextUART("1. Leer Potenciometro\r\n"); // Opción para leer el valor del potenciómetro.
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 60 00 	call	0xc0	; 0xc0 <writeTextUART>
		writeTextUART("2. Enviar ASCII\r\n"); // Opción para enviar caracteres ASCII.
 128:	88 e1       	ldi	r24, 0x18	; 24
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 60 00 	call	0xc0	; 0xc0 <writeTextUART>
		writeTextUART("Ingrese su eleccion: "); // Pedir al usuario que ingrese su elección.
 130:	8a e2       	ldi	r24, 0x2A	; 42
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 60 00 	call	0xc0	; 0xc0 <writeTextUART>

		uint8_t choice = 0; // Variable para almacenar la elección del usuario.
 138:	90 e0       	ldi	r25, 0x00	; 0
		while (!choice) // Esperar hasta que se reciba una elección válida.
 13a:	0e c0       	rjmp	.+28     	; 0x158 <main+0x5a>
		{
			if (bufferTX != 0) // Verificar si se ha recibido un nuevo dato por UART.
 13c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <bufferTX>
 140:	88 23       	and	r24, r24
 142:	51 f0       	breq	.+20     	; 0x158 <main+0x5a>
			{
				char receivedChar = bufferTX; // Guardar el caracter recibido.
 144:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <bufferTX>
				bufferTX = 0; // Limpiar el buffer.
 148:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <bufferTX>
				if (receivedChar == '1' || receivedChar == '2') // Verificar si la elección es válida.
 14c:	2f ec       	ldi	r18, 0xCF	; 207
 14e:	28 0f       	add	r18, r24
 150:	22 30       	cpi	r18, 0x02	; 2
 152:	10 f4       	brcc	.+4      	; 0x158 <main+0x5a>
				{
					choice = receivedChar - '0'; // Convertir el caracter a número.
 154:	90 ed       	ldi	r25, 0xD0	; 208
 156:	98 0f       	add	r25, r24
		writeTextUART("1. Leer Potenciometro\r\n"); // Opción para leer el valor del potenciómetro.
		writeTextUART("2. Enviar ASCII\r\n"); // Opción para enviar caracteres ASCII.
		writeTextUART("Ingrese su eleccion: "); // Pedir al usuario que ingrese su elección.

		uint8_t choice = 0; // Variable para almacenar la elección del usuario.
		while (!choice) // Esperar hasta que se reciba una elección válida.
 158:	99 23       	and	r25, r25
 15a:	81 f3       	breq	.-32     	; 0x13c <main+0x3e>
					choice = receivedChar - '0'; // Convertir el caracter a número.
				}
			}
		}

		switch (choice) // Procesar la elección del usuario.
 15c:	91 30       	cpi	r25, 0x01	; 1
 15e:	19 f0       	breq	.+6      	; 0x166 <main+0x68>
 160:	92 30       	cpi	r25, 0x02	; 2
 162:	79 f1       	breq	.+94     	; 0x1c2 <main+0xc4>
 164:	4a c0       	rjmp	.+148    	; 0x1fa <main+0xfc>
		{
			case 1:
			ADCSRA |= (1 << ADSC);  // Iniciar la conversión del ADC estableciendo ADSC.
 166:	ea e7       	ldi	r30, 0x7A	; 122
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
			while (ADCSRA & (1 << ADSC));  // Esperar a que la conversión se complete.
 170:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 174:	86 fd       	sbrc	r24, 6
 176:	fc cf       	rjmp	.-8      	; 0x170 <main+0x72>
			valorADC = ADC;  // Leer el valor del ADC.
 178:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 17c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 180:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
 184:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>

			char buffer[30];
			snprintf(buffer, sizeof(buffer), "Valor ADC: %u\r\n", valorADC); // Formatear el valor del ADC como string.
 188:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
 18c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
 190:	9f 93       	push	r25
 192:	8f 93       	push	r24
 194:	80 e4       	ldi	r24, 0x40	; 64
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	9f 93       	push	r25
 19a:	8f 93       	push	r24
 19c:	1f 92       	push	r1
 19e:	8e e1       	ldi	r24, 0x1E	; 30
 1a0:	8f 93       	push	r24
 1a2:	8e 01       	movw	r16, r28
 1a4:	0f 5f       	subi	r16, 0xFF	; 255
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
 1a8:	1f 93       	push	r17
 1aa:	0f 93       	push	r16
 1ac:	0e 94 28 01 	call	0x250	; 0x250 <snprintf>
			writeTextUART(buffer); // Enviar el valor formateado por UART.
 1b0:	c8 01       	movw	r24, r16
 1b2:	0e 94 60 00 	call	0xc0	; 0xc0 <writeTextUART>
			break;
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	af cf       	rjmp	.-162    	; 0x120 <main+0x22>

			case 2:
			writeTextUART("Ingrese el caracter ASCII: "); // Pedir al usuario que ingrese un caracter ASCII.
 1c2:	80 e5       	ldi	r24, 0x50	; 80
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 60 00 	call	0xc0	; 0xc0 <writeTextUART>
			while (bufferTX == 0);  // Esperar a que se ingrese un caracter.
 1ca:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <bufferTX>
 1ce:	88 23       	and	r24, r24
 1d0:	e1 f3       	breq	.-8      	; 0x1ca <main+0xcc>
			char asciiChar = bufferTX; // Almacenar el caracter recibido.
 1d2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <bufferTX>
			bufferTX = 0; // Limpiar el buffer.
 1d6:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <bufferTX>
			PORTB = asciiChar & 0x3F; // Asignar los 6 bits menos significativos al puerto B.
 1da:	98 2f       	mov	r25, r24
 1dc:	9f 73       	andi	r25, 0x3F	; 63
 1de:	95 b9       	out	0x05, r25	; 5
			PORTC = (asciiChar >> 6) & 0x03; // Asignar los 2 bits más significativos al puerto C.
 1e0:	98 2f       	mov	r25, r24
 1e2:	92 95       	swap	r25
 1e4:	96 95       	lsr	r25
 1e6:	96 95       	lsr	r25
 1e8:	93 70       	andi	r25, 0x03	; 3
 1ea:	98 b9       	out	0x08, r25	; 8
			writeUART(asciiChar); // Enviar el caracter de vuelta por UART.
 1ec:	0e 94 6d 00 	call	0xda	; 0xda <writeUART>
			writeTextUART("\r\n"); // Enviar un salto de línea por UART.
 1f0:	82 e9       	ldi	r24, 0x92	; 146
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 60 00 	call	0xc0	; 0xc0 <writeTextUART>
			break;
 1f8:	93 cf       	rjmp	.-218    	; 0x120 <main+0x22>

			default:
			writeTextUART("Elección invalida. Intente nuevamente.\r\n"); // Mensaje para elección inválida.
 1fa:	8c e6       	ldi	r24, 0x6C	; 108
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 60 00 	call	0xc0	; 0xc0 <writeTextUART>
			break;
		}
	}
 202:	8e cf       	rjmp	.-228    	; 0x120 <main+0x22>

00000204 <__vector_21>:
	DDRC = 0xFF;  // Configurar todos los pines del puerto C como salidas.
}

// ISR para la conversión completa del ADC.
ISR(ADC_vect)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
	valorADC = ADC; // Almacenar el resultado del ADC en la variable global.
 212:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 216:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 21a:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
 21e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
}
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_18>:

// ISR para la recepción completa de USART.
ISR(USART_RX_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	8f 93       	push	r24
	bufferTX = UDR0; // Almacenar los datos recibidos en el buffer.
 23c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 240:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <bufferTX>
}
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <snprintf>:
 250:	ae e0       	ldi	r26, 0x0E	; 14
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	ee e2       	ldi	r30, 0x2E	; 46
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__prologue_saves__+0x1c>
 25c:	0d 89       	ldd	r16, Y+21	; 0x15
 25e:	1e 89       	ldd	r17, Y+22	; 0x16
 260:	8f 89       	ldd	r24, Y+23	; 0x17
 262:	98 8d       	ldd	r25, Y+24	; 0x18
 264:	26 e0       	ldi	r18, 0x06	; 6
 266:	2c 83       	std	Y+4, r18	; 0x04
 268:	1a 83       	std	Y+2, r17	; 0x02
 26a:	09 83       	std	Y+1, r16	; 0x01
 26c:	97 ff       	sbrs	r25, 7
 26e:	02 c0       	rjmp	.+4      	; 0x274 <snprintf+0x24>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e8       	ldi	r25, 0x80	; 128
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	9e 83       	std	Y+6, r25	; 0x06
 278:	8d 83       	std	Y+5, r24	; 0x05
 27a:	ae 01       	movw	r20, r28
 27c:	45 5e       	subi	r20, 0xE5	; 229
 27e:	5f 4f       	sbci	r21, 0xFF	; 255
 280:	69 8d       	ldd	r22, Y+25	; 0x19
 282:	7a 8d       	ldd	r23, Y+26	; 0x1a
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 58 01 	call	0x2b0	; 0x2b0 <vfprintf>
 28c:	4d 81       	ldd	r20, Y+5	; 0x05
 28e:	5e 81       	ldd	r21, Y+6	; 0x06
 290:	57 fd       	sbrc	r21, 7
 292:	0a c0       	rjmp	.+20     	; 0x2a8 <snprintf+0x58>
 294:	2f 81       	ldd	r18, Y+7	; 0x07
 296:	38 85       	ldd	r19, Y+8	; 0x08
 298:	42 17       	cp	r20, r18
 29a:	53 07       	cpc	r21, r19
 29c:	0c f4       	brge	.+2      	; 0x2a0 <snprintf+0x50>
 29e:	9a 01       	movw	r18, r20
 2a0:	f8 01       	movw	r30, r16
 2a2:	e2 0f       	add	r30, r18
 2a4:	f3 1f       	adc	r31, r19
 2a6:	10 82       	st	Z, r1
 2a8:	2e 96       	adiw	r28, 0x0e	; 14
 2aa:	e4 e0       	ldi	r30, 0x04	; 4
 2ac:	0c 94 13 04 	jmp	0x826	; 0x826 <__epilogue_restores__+0x1c>

000002b0 <vfprintf>:
 2b0:	ab e0       	ldi	r26, 0x0B	; 11
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	ee e5       	ldi	r30, 0x5E	; 94
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__prologue_saves__>
 2bc:	6c 01       	movw	r12, r24
 2be:	7b 01       	movw	r14, r22
 2c0:	8a 01       	movw	r16, r20
 2c2:	fc 01       	movw	r30, r24
 2c4:	17 82       	std	Z+7, r1	; 0x07
 2c6:	16 82       	std	Z+6, r1	; 0x06
 2c8:	83 81       	ldd	r24, Z+3	; 0x03
 2ca:	81 ff       	sbrs	r24, 1
 2cc:	cc c1       	rjmp	.+920    	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
 2ce:	ce 01       	movw	r24, r28
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	3c 01       	movw	r6, r24
 2d4:	f6 01       	movw	r30, r12
 2d6:	93 81       	ldd	r25, Z+3	; 0x03
 2d8:	f7 01       	movw	r30, r14
 2da:	93 fd       	sbrc	r25, 3
 2dc:	85 91       	lpm	r24, Z+
 2de:	93 ff       	sbrs	r25, 3
 2e0:	81 91       	ld	r24, Z+
 2e2:	7f 01       	movw	r14, r30
 2e4:	88 23       	and	r24, r24
 2e6:	09 f4       	brne	.+2      	; 0x2ea <vfprintf+0x3a>
 2e8:	ba c1       	rjmp	.+884    	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
 2ea:	85 32       	cpi	r24, 0x25	; 37
 2ec:	39 f4       	brne	.+14     	; 0x2fc <vfprintf+0x4c>
 2ee:	93 fd       	sbrc	r25, 3
 2f0:	85 91       	lpm	r24, Z+
 2f2:	93 ff       	sbrs	r25, 3
 2f4:	81 91       	ld	r24, Z+
 2f6:	7f 01       	movw	r14, r30
 2f8:	85 32       	cpi	r24, 0x25	; 37
 2fa:	29 f4       	brne	.+10     	; 0x306 <vfprintf+0x56>
 2fc:	b6 01       	movw	r22, r12
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 304:	e7 cf       	rjmp	.-50     	; 0x2d4 <vfprintf+0x24>
 306:	91 2c       	mov	r9, r1
 308:	21 2c       	mov	r2, r1
 30a:	31 2c       	mov	r3, r1
 30c:	ff e1       	ldi	r31, 0x1F	; 31
 30e:	f3 15       	cp	r31, r3
 310:	d8 f0       	brcs	.+54     	; 0x348 <vfprintf+0x98>
 312:	8b 32       	cpi	r24, 0x2B	; 43
 314:	79 f0       	breq	.+30     	; 0x334 <vfprintf+0x84>
 316:	38 f4       	brcc	.+14     	; 0x326 <vfprintf+0x76>
 318:	80 32       	cpi	r24, 0x20	; 32
 31a:	79 f0       	breq	.+30     	; 0x33a <vfprintf+0x8a>
 31c:	83 32       	cpi	r24, 0x23	; 35
 31e:	a1 f4       	brne	.+40     	; 0x348 <vfprintf+0x98>
 320:	23 2d       	mov	r18, r3
 322:	20 61       	ori	r18, 0x10	; 16
 324:	1d c0       	rjmp	.+58     	; 0x360 <vfprintf+0xb0>
 326:	8d 32       	cpi	r24, 0x2D	; 45
 328:	61 f0       	breq	.+24     	; 0x342 <vfprintf+0x92>
 32a:	80 33       	cpi	r24, 0x30	; 48
 32c:	69 f4       	brne	.+26     	; 0x348 <vfprintf+0x98>
 32e:	23 2d       	mov	r18, r3
 330:	21 60       	ori	r18, 0x01	; 1
 332:	16 c0       	rjmp	.+44     	; 0x360 <vfprintf+0xb0>
 334:	83 2d       	mov	r24, r3
 336:	82 60       	ori	r24, 0x02	; 2
 338:	38 2e       	mov	r3, r24
 33a:	e3 2d       	mov	r30, r3
 33c:	e4 60       	ori	r30, 0x04	; 4
 33e:	3e 2e       	mov	r3, r30
 340:	2a c0       	rjmp	.+84     	; 0x396 <vfprintf+0xe6>
 342:	f3 2d       	mov	r31, r3
 344:	f8 60       	ori	r31, 0x08	; 8
 346:	1d c0       	rjmp	.+58     	; 0x382 <vfprintf+0xd2>
 348:	37 fc       	sbrc	r3, 7
 34a:	2d c0       	rjmp	.+90     	; 0x3a6 <vfprintf+0xf6>
 34c:	20 ed       	ldi	r18, 0xD0	; 208
 34e:	28 0f       	add	r18, r24
 350:	2a 30       	cpi	r18, 0x0A	; 10
 352:	40 f0       	brcs	.+16     	; 0x364 <vfprintf+0xb4>
 354:	8e 32       	cpi	r24, 0x2E	; 46
 356:	b9 f4       	brne	.+46     	; 0x386 <vfprintf+0xd6>
 358:	36 fc       	sbrc	r3, 6
 35a:	81 c1       	rjmp	.+770    	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
 35c:	23 2d       	mov	r18, r3
 35e:	20 64       	ori	r18, 0x40	; 64
 360:	32 2e       	mov	r3, r18
 362:	19 c0       	rjmp	.+50     	; 0x396 <vfprintf+0xe6>
 364:	36 fe       	sbrs	r3, 6
 366:	06 c0       	rjmp	.+12     	; 0x374 <vfprintf+0xc4>
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	98 9e       	mul	r9, r24
 36c:	20 0d       	add	r18, r0
 36e:	11 24       	eor	r1, r1
 370:	92 2e       	mov	r9, r18
 372:	11 c0       	rjmp	.+34     	; 0x396 <vfprintf+0xe6>
 374:	ea e0       	ldi	r30, 0x0A	; 10
 376:	2e 9e       	mul	r2, r30
 378:	20 0d       	add	r18, r0
 37a:	11 24       	eor	r1, r1
 37c:	22 2e       	mov	r2, r18
 37e:	f3 2d       	mov	r31, r3
 380:	f0 62       	ori	r31, 0x20	; 32
 382:	3f 2e       	mov	r3, r31
 384:	08 c0       	rjmp	.+16     	; 0x396 <vfprintf+0xe6>
 386:	8c 36       	cpi	r24, 0x6C	; 108
 388:	21 f4       	brne	.+8      	; 0x392 <vfprintf+0xe2>
 38a:	83 2d       	mov	r24, r3
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	38 2e       	mov	r3, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <vfprintf+0xe6>
 392:	88 36       	cpi	r24, 0x68	; 104
 394:	41 f4       	brne	.+16     	; 0x3a6 <vfprintf+0xf6>
 396:	f7 01       	movw	r30, r14
 398:	93 fd       	sbrc	r25, 3
 39a:	85 91       	lpm	r24, Z+
 39c:	93 ff       	sbrs	r25, 3
 39e:	81 91       	ld	r24, Z+
 3a0:	7f 01       	movw	r14, r30
 3a2:	81 11       	cpse	r24, r1
 3a4:	b3 cf       	rjmp	.-154    	; 0x30c <vfprintf+0x5c>
 3a6:	98 2f       	mov	r25, r24
 3a8:	9f 7d       	andi	r25, 0xDF	; 223
 3aa:	95 54       	subi	r25, 0x45	; 69
 3ac:	93 30       	cpi	r25, 0x03	; 3
 3ae:	28 f4       	brcc	.+10     	; 0x3ba <vfprintf+0x10a>
 3b0:	0c 5f       	subi	r16, 0xFC	; 252
 3b2:	1f 4f       	sbci	r17, 0xFF	; 255
 3b4:	9f e3       	ldi	r25, 0x3F	; 63
 3b6:	99 83       	std	Y+1, r25	; 0x01
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <vfprintf+0x124>
 3ba:	83 36       	cpi	r24, 0x63	; 99
 3bc:	31 f0       	breq	.+12     	; 0x3ca <vfprintf+0x11a>
 3be:	83 37       	cpi	r24, 0x73	; 115
 3c0:	71 f0       	breq	.+28     	; 0x3de <vfprintf+0x12e>
 3c2:	83 35       	cpi	r24, 0x53	; 83
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <vfprintf+0x118>
 3c6:	59 c0       	rjmp	.+178    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 3c8:	21 c0       	rjmp	.+66     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3ca:	f8 01       	movw	r30, r16
 3cc:	80 81       	ld	r24, Z
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	0e 5f       	subi	r16, 0xFE	; 254
 3d2:	1f 4f       	sbci	r17, 0xFF	; 255
 3d4:	88 24       	eor	r8, r8
 3d6:	83 94       	inc	r8
 3d8:	91 2c       	mov	r9, r1
 3da:	53 01       	movw	r10, r6
 3dc:	13 c0       	rjmp	.+38     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3de:	28 01       	movw	r4, r16
 3e0:	f2 e0       	ldi	r31, 0x02	; 2
 3e2:	4f 0e       	add	r4, r31
 3e4:	51 1c       	adc	r5, r1
 3e6:	f8 01       	movw	r30, r16
 3e8:	a0 80       	ld	r10, Z
 3ea:	b1 80       	ldd	r11, Z+1	; 0x01
 3ec:	36 fe       	sbrs	r3, 6
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <vfprintf+0x146>
 3f0:	69 2d       	mov	r22, r9
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <vfprintf+0x14a>
 3f6:	6f ef       	ldi	r22, 0xFF	; 255
 3f8:	7f ef       	ldi	r23, 0xFF	; 255
 3fa:	c5 01       	movw	r24, r10
 3fc:	0e 94 44 03 	call	0x688	; 0x688 <strnlen>
 400:	4c 01       	movw	r8, r24
 402:	82 01       	movw	r16, r4
 404:	f3 2d       	mov	r31, r3
 406:	ff 77       	andi	r31, 0x7F	; 127
 408:	3f 2e       	mov	r3, r31
 40a:	16 c0       	rjmp	.+44     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 40c:	28 01       	movw	r4, r16
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	42 0e       	add	r4, r18
 412:	51 1c       	adc	r5, r1
 414:	f8 01       	movw	r30, r16
 416:	a0 80       	ld	r10, Z
 418:	b1 80       	ldd	r11, Z+1	; 0x01
 41a:	36 fe       	sbrs	r3, 6
 41c:	03 c0       	rjmp	.+6      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 41e:	69 2d       	mov	r22, r9
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	6f ef       	ldi	r22, 0xFF	; 255
 426:	7f ef       	ldi	r23, 0xFF	; 255
 428:	c5 01       	movw	r24, r10
 42a:	0e 94 39 03 	call	0x672	; 0x672 <strnlen_P>
 42e:	4c 01       	movw	r8, r24
 430:	f3 2d       	mov	r31, r3
 432:	f0 68       	ori	r31, 0x80	; 128
 434:	3f 2e       	mov	r3, r31
 436:	82 01       	movw	r16, r4
 438:	33 fc       	sbrc	r3, 3
 43a:	1b c0       	rjmp	.+54     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 43c:	82 2d       	mov	r24, r2
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	88 16       	cp	r8, r24
 442:	99 06       	cpc	r9, r25
 444:	b0 f4       	brcc	.+44     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 446:	b6 01       	movw	r22, r12
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 450:	2a 94       	dec	r2
 452:	f4 cf       	rjmp	.-24     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 454:	f5 01       	movw	r30, r10
 456:	37 fc       	sbrc	r3, 7
 458:	85 91       	lpm	r24, Z+
 45a:	37 fe       	sbrs	r3, 7
 45c:	81 91       	ld	r24, Z+
 45e:	5f 01       	movw	r10, r30
 460:	b6 01       	movw	r22, r12
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 468:	21 10       	cpse	r2, r1
 46a:	2a 94       	dec	r2
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	82 1a       	sub	r8, r18
 470:	91 08       	sbc	r9, r1
 472:	81 14       	cp	r8, r1
 474:	91 04       	cpc	r9, r1
 476:	71 f7       	brne	.-36     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 478:	e8 c0       	rjmp	.+464    	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
 47a:	84 36       	cpi	r24, 0x64	; 100
 47c:	11 f0       	breq	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	89 36       	cpi	r24, 0x69	; 105
 480:	41 f5       	brne	.+80     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 482:	f8 01       	movw	r30, r16
 484:	37 fe       	sbrs	r3, 7
 486:	07 c0       	rjmp	.+14     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 488:	60 81       	ld	r22, Z
 48a:	71 81       	ldd	r23, Z+1	; 0x01
 48c:	82 81       	ldd	r24, Z+2	; 0x02
 48e:	93 81       	ldd	r25, Z+3	; 0x03
 490:	0c 5f       	subi	r16, 0xFC	; 252
 492:	1f 4f       	sbci	r17, 0xFF	; 255
 494:	08 c0       	rjmp	.+16     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 496:	60 81       	ld	r22, Z
 498:	71 81       	ldd	r23, Z+1	; 0x01
 49a:	07 2e       	mov	r0, r23
 49c:	00 0c       	add	r0, r0
 49e:	88 0b       	sbc	r24, r24
 4a0:	99 0b       	sbc	r25, r25
 4a2:	0e 5f       	subi	r16, 0xFE	; 254
 4a4:	1f 4f       	sbci	r17, 0xFF	; 255
 4a6:	f3 2d       	mov	r31, r3
 4a8:	ff 76       	andi	r31, 0x6F	; 111
 4aa:	3f 2e       	mov	r3, r31
 4ac:	97 ff       	sbrs	r25, 7
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b0:	90 95       	com	r25
 4b2:	80 95       	com	r24
 4b4:	70 95       	com	r23
 4b6:	61 95       	neg	r22
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	8f 4f       	sbci	r24, 0xFF	; 255
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	f0 68       	ori	r31, 0x80	; 128
 4c0:	3f 2e       	mov	r3, r31
 4c2:	2a e0       	ldi	r18, 0x0A	; 10
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	a3 01       	movw	r20, r6
 4c8:	0e 94 8b 03 	call	0x716	; 0x716 <__ultoa_invert>
 4cc:	88 2e       	mov	r8, r24
 4ce:	86 18       	sub	r8, r6
 4d0:	45 c0       	rjmp	.+138    	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 4d2:	85 37       	cpi	r24, 0x75	; 117
 4d4:	31 f4       	brne	.+12     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4d6:	23 2d       	mov	r18, r3
 4d8:	2f 7e       	andi	r18, 0xEF	; 239
 4da:	b2 2e       	mov	r11, r18
 4dc:	2a e0       	ldi	r18, 0x0A	; 10
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	25 c0       	rjmp	.+74     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 4e2:	93 2d       	mov	r25, r3
 4e4:	99 7f       	andi	r25, 0xF9	; 249
 4e6:	b9 2e       	mov	r11, r25
 4e8:	8f 36       	cpi	r24, 0x6F	; 111
 4ea:	c1 f0       	breq	.+48     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 4ec:	18 f4       	brcc	.+6      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4ee:	88 35       	cpi	r24, 0x58	; 88
 4f0:	79 f0       	breq	.+30     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4f2:	b5 c0       	rjmp	.+362    	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
 4f4:	80 37       	cpi	r24, 0x70	; 112
 4f6:	19 f0       	breq	.+6      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4f8:	88 37       	cpi	r24, 0x78	; 120
 4fa:	21 f0       	breq	.+8      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4fc:	b0 c0       	rjmp	.+352    	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
 4fe:	e9 2f       	mov	r30, r25
 500:	e0 61       	ori	r30, 0x10	; 16
 502:	be 2e       	mov	r11, r30
 504:	b4 fe       	sbrs	r11, 4
 506:	0d c0       	rjmp	.+26     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 508:	fb 2d       	mov	r31, r11
 50a:	f4 60       	ori	r31, 0x04	; 4
 50c:	bf 2e       	mov	r11, r31
 50e:	09 c0       	rjmp	.+18     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 510:	34 fe       	sbrs	r3, 4
 512:	0a c0       	rjmp	.+20     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 514:	29 2f       	mov	r18, r25
 516:	26 60       	ori	r18, 0x06	; 6
 518:	b2 2e       	mov	r11, r18
 51a:	06 c0       	rjmp	.+12     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 51c:	28 e0       	ldi	r18, 0x08	; 8
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	05 c0       	rjmp	.+10     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 522:	20 e1       	ldi	r18, 0x10	; 16
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 528:	20 e1       	ldi	r18, 0x10	; 16
 52a:	32 e0       	ldi	r19, 0x02	; 2
 52c:	f8 01       	movw	r30, r16
 52e:	b7 fe       	sbrs	r11, 7
 530:	07 c0       	rjmp	.+14     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 532:	60 81       	ld	r22, Z
 534:	71 81       	ldd	r23, Z+1	; 0x01
 536:	82 81       	ldd	r24, Z+2	; 0x02
 538:	93 81       	ldd	r25, Z+3	; 0x03
 53a:	0c 5f       	subi	r16, 0xFC	; 252
 53c:	1f 4f       	sbci	r17, 0xFF	; 255
 53e:	06 c0       	rjmp	.+12     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 540:	60 81       	ld	r22, Z
 542:	71 81       	ldd	r23, Z+1	; 0x01
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 5f       	subi	r16, 0xFE	; 254
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
 54c:	a3 01       	movw	r20, r6
 54e:	0e 94 8b 03 	call	0x716	; 0x716 <__ultoa_invert>
 552:	88 2e       	mov	r8, r24
 554:	86 18       	sub	r8, r6
 556:	fb 2d       	mov	r31, r11
 558:	ff 77       	andi	r31, 0x7F	; 127
 55a:	3f 2e       	mov	r3, r31
 55c:	36 fe       	sbrs	r3, 6
 55e:	0d c0       	rjmp	.+26     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 560:	23 2d       	mov	r18, r3
 562:	2e 7f       	andi	r18, 0xFE	; 254
 564:	a2 2e       	mov	r10, r18
 566:	89 14       	cp	r8, r9
 568:	58 f4       	brcc	.+22     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 56a:	34 fe       	sbrs	r3, 4
 56c:	0b c0       	rjmp	.+22     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 56e:	32 fc       	sbrc	r3, 2
 570:	09 c0       	rjmp	.+18     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 572:	83 2d       	mov	r24, r3
 574:	8e 7e       	andi	r24, 0xEE	; 238
 576:	a8 2e       	mov	r10, r24
 578:	05 c0       	rjmp	.+10     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 57a:	b8 2c       	mov	r11, r8
 57c:	a3 2c       	mov	r10, r3
 57e:	03 c0       	rjmp	.+6      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 580:	b8 2c       	mov	r11, r8
 582:	01 c0       	rjmp	.+2      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 584:	b9 2c       	mov	r11, r9
 586:	a4 fe       	sbrs	r10, 4
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 58a:	fe 01       	movw	r30, r28
 58c:	e8 0d       	add	r30, r8
 58e:	f1 1d       	adc	r31, r1
 590:	80 81       	ld	r24, Z
 592:	80 33       	cpi	r24, 0x30	; 48
 594:	21 f4       	brne	.+8      	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
 596:	9a 2d       	mov	r25, r10
 598:	99 7e       	andi	r25, 0xE9	; 233
 59a:	a9 2e       	mov	r10, r25
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 59e:	a2 fe       	sbrs	r10, 2
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 5a2:	b3 94       	inc	r11
 5a4:	b3 94       	inc	r11
 5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 5a8:	8a 2d       	mov	r24, r10
 5aa:	86 78       	andi	r24, 0x86	; 134
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 5ae:	b3 94       	inc	r11
 5b0:	a3 fc       	sbrc	r10, 3
 5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
 5b4:	a0 fe       	sbrs	r10, 0
 5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 5b8:	b2 14       	cp	r11, r2
 5ba:	88 f4       	brcc	.+34     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 5bc:	28 0c       	add	r2, r8
 5be:	92 2c       	mov	r9, r2
 5c0:	9b 18       	sub	r9, r11
 5c2:	0e c0       	rjmp	.+28     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 5c4:	b2 14       	cp	r11, r2
 5c6:	60 f4       	brcc	.+24     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 5c8:	b6 01       	movw	r22, r12
 5ca:	80 e2       	ldi	r24, 0x20	; 32
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 5d2:	b3 94       	inc	r11
 5d4:	f7 cf       	rjmp	.-18     	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 5d6:	b2 14       	cp	r11, r2
 5d8:	18 f4       	brcc	.+6      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 5da:	2b 18       	sub	r2, r11
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5de:	98 2c       	mov	r9, r8
 5e0:	21 2c       	mov	r2, r1
 5e2:	a4 fe       	sbrs	r10, 4
 5e4:	10 c0       	rjmp	.+32     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5e6:	b6 01       	movw	r22, r12
 5e8:	80 e3       	ldi	r24, 0x30	; 48
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 5f0:	a2 fe       	sbrs	r10, 2
 5f2:	17 c0       	rjmp	.+46     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 5f4:	a1 fc       	sbrc	r10, 1
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5f8:	88 e7       	ldi	r24, 0x78	; 120
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 5fe:	88 e5       	ldi	r24, 0x58	; 88
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	b6 01       	movw	r22, r12
 604:	0c c0       	rjmp	.+24     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
 606:	8a 2d       	mov	r24, r10
 608:	86 78       	andi	r24, 0x86	; 134
 60a:	59 f0       	breq	.+22     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 60c:	a1 fe       	sbrs	r10, 1
 60e:	02 c0       	rjmp	.+4      	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 610:	8b e2       	ldi	r24, 0x2B	; 43
 612:	01 c0       	rjmp	.+2      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 614:	80 e2       	ldi	r24, 0x20	; 32
 616:	a7 fc       	sbrc	r10, 7
 618:	8d e2       	ldi	r24, 0x2D	; 45
 61a:	b6 01       	movw	r22, r12
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 622:	89 14       	cp	r8, r9
 624:	38 f4       	brcc	.+14     	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
 626:	b6 01       	movw	r22, r12
 628:	80 e3       	ldi	r24, 0x30	; 48
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 630:	9a 94       	dec	r9
 632:	f7 cf       	rjmp	.-18     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 634:	8a 94       	dec	r8
 636:	f3 01       	movw	r30, r6
 638:	e8 0d       	add	r30, r8
 63a:	f1 1d       	adc	r31, r1
 63c:	80 81       	ld	r24, Z
 63e:	b6 01       	movw	r22, r12
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 646:	81 10       	cpse	r8, r1
 648:	f5 cf       	rjmp	.-22     	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
 64a:	22 20       	and	r2, r2
 64c:	09 f4       	brne	.+2      	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
 64e:	42 ce       	rjmp	.-892    	; 0x2d4 <vfprintf+0x24>
 650:	b6 01       	movw	r22, r12
 652:	80 e2       	ldi	r24, 0x20	; 32
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 4f 03 	call	0x69e	; 0x69e <fputc>
 65a:	2a 94       	dec	r2
 65c:	f6 cf       	rjmp	.-20     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
 65e:	f6 01       	movw	r30, r12
 660:	86 81       	ldd	r24, Z+6	; 0x06
 662:	97 81       	ldd	r25, Z+7	; 0x07
 664:	02 c0       	rjmp	.+4      	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
 666:	8f ef       	ldi	r24, 0xFF	; 255
 668:	9f ef       	ldi	r25, 0xFF	; 255
 66a:	2b 96       	adiw	r28, 0x0b	; 11
 66c:	e2 e1       	ldi	r30, 0x12	; 18
 66e:	0c 94 05 04 	jmp	0x80a	; 0x80a <__epilogue_restores__>

00000672 <strnlen_P>:
 672:	fc 01       	movw	r30, r24
 674:	05 90       	lpm	r0, Z+
 676:	61 50       	subi	r22, 0x01	; 1
 678:	70 40       	sbci	r23, 0x00	; 0
 67a:	01 10       	cpse	r0, r1
 67c:	d8 f7       	brcc	.-10     	; 0x674 <strnlen_P+0x2>
 67e:	80 95       	com	r24
 680:	90 95       	com	r25
 682:	8e 0f       	add	r24, r30
 684:	9f 1f       	adc	r25, r31
 686:	08 95       	ret

00000688 <strnlen>:
 688:	fc 01       	movw	r30, r24
 68a:	61 50       	subi	r22, 0x01	; 1
 68c:	70 40       	sbci	r23, 0x00	; 0
 68e:	01 90       	ld	r0, Z+
 690:	01 10       	cpse	r0, r1
 692:	d8 f7       	brcc	.-10     	; 0x68a <strnlen+0x2>
 694:	80 95       	com	r24
 696:	90 95       	com	r25
 698:	8e 0f       	add	r24, r30
 69a:	9f 1f       	adc	r25, r31
 69c:	08 95       	ret

0000069e <fputc>:
 69e:	0f 93       	push	r16
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	fb 01       	movw	r30, r22
 6a8:	23 81       	ldd	r18, Z+3	; 0x03
 6aa:	21 fd       	sbrc	r18, 1
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <fputc+0x16>
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	2c c0       	rjmp	.+88     	; 0x70c <fputc+0x6e>
 6b4:	22 ff       	sbrs	r18, 2
 6b6:	16 c0       	rjmp	.+44     	; 0x6e4 <fputc+0x46>
 6b8:	46 81       	ldd	r20, Z+6	; 0x06
 6ba:	57 81       	ldd	r21, Z+7	; 0x07
 6bc:	24 81       	ldd	r18, Z+4	; 0x04
 6be:	35 81       	ldd	r19, Z+5	; 0x05
 6c0:	42 17       	cp	r20, r18
 6c2:	53 07       	cpc	r21, r19
 6c4:	44 f4       	brge	.+16     	; 0x6d6 <fputc+0x38>
 6c6:	a0 81       	ld	r26, Z
 6c8:	b1 81       	ldd	r27, Z+1	; 0x01
 6ca:	9d 01       	movw	r18, r26
 6cc:	2f 5f       	subi	r18, 0xFF	; 255
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	31 83       	std	Z+1, r19	; 0x01
 6d2:	20 83       	st	Z, r18
 6d4:	8c 93       	st	X, r24
 6d6:	26 81       	ldd	r18, Z+6	; 0x06
 6d8:	37 81       	ldd	r19, Z+7	; 0x07
 6da:	2f 5f       	subi	r18, 0xFF	; 255
 6dc:	3f 4f       	sbci	r19, 0xFF	; 255
 6de:	37 83       	std	Z+7, r19	; 0x07
 6e0:	26 83       	std	Z+6, r18	; 0x06
 6e2:	14 c0       	rjmp	.+40     	; 0x70c <fputc+0x6e>
 6e4:	8b 01       	movw	r16, r22
 6e6:	ec 01       	movw	r28, r24
 6e8:	fb 01       	movw	r30, r22
 6ea:	00 84       	ldd	r0, Z+8	; 0x08
 6ec:	f1 85       	ldd	r31, Z+9	; 0x09
 6ee:	e0 2d       	mov	r30, r0
 6f0:	09 95       	icall
 6f2:	89 2b       	or	r24, r25
 6f4:	e1 f6       	brne	.-72     	; 0x6ae <fputc+0x10>
 6f6:	d8 01       	movw	r26, r16
 6f8:	16 96       	adiw	r26, 0x06	; 6
 6fa:	8d 91       	ld	r24, X+
 6fc:	9c 91       	ld	r25, X
 6fe:	17 97       	sbiw	r26, 0x07	; 7
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	17 96       	adiw	r26, 0x07	; 7
 704:	9c 93       	st	X, r25
 706:	8e 93       	st	-X, r24
 708:	16 97       	sbiw	r26, 0x06	; 6
 70a:	ce 01       	movw	r24, r28
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	08 95       	ret

00000716 <__ultoa_invert>:
 716:	fa 01       	movw	r30, r20
 718:	aa 27       	eor	r26, r26
 71a:	28 30       	cpi	r18, 0x08	; 8
 71c:	51 f1       	breq	.+84     	; 0x772 <__ultoa_invert+0x5c>
 71e:	20 31       	cpi	r18, 0x10	; 16
 720:	81 f1       	breq	.+96     	; 0x782 <__ultoa_invert+0x6c>
 722:	e8 94       	clt
 724:	6f 93       	push	r22
 726:	6e 7f       	andi	r22, 0xFE	; 254
 728:	6e 5f       	subi	r22, 0xFE	; 254
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	af 4f       	sbci	r26, 0xFF	; 255
 732:	b1 e0       	ldi	r27, 0x01	; 1
 734:	3e d0       	rcall	.+124    	; 0x7b2 <__ultoa_invert+0x9c>
 736:	b4 e0       	ldi	r27, 0x04	; 4
 738:	3c d0       	rcall	.+120    	; 0x7b2 <__ultoa_invert+0x9c>
 73a:	67 0f       	add	r22, r23
 73c:	78 1f       	adc	r23, r24
 73e:	89 1f       	adc	r24, r25
 740:	9a 1f       	adc	r25, r26
 742:	a1 1d       	adc	r26, r1
 744:	68 0f       	add	r22, r24
 746:	79 1f       	adc	r23, r25
 748:	8a 1f       	adc	r24, r26
 74a:	91 1d       	adc	r25, r1
 74c:	a1 1d       	adc	r26, r1
 74e:	6a 0f       	add	r22, r26
 750:	71 1d       	adc	r23, r1
 752:	81 1d       	adc	r24, r1
 754:	91 1d       	adc	r25, r1
 756:	a1 1d       	adc	r26, r1
 758:	20 d0       	rcall	.+64     	; 0x79a <__ultoa_invert+0x84>
 75a:	09 f4       	brne	.+2      	; 0x75e <__ultoa_invert+0x48>
 75c:	68 94       	set
 75e:	3f 91       	pop	r19
 760:	2a e0       	ldi	r18, 0x0A	; 10
 762:	26 9f       	mul	r18, r22
 764:	11 24       	eor	r1, r1
 766:	30 19       	sub	r19, r0
 768:	30 5d       	subi	r19, 0xD0	; 208
 76a:	31 93       	st	Z+, r19
 76c:	de f6       	brtc	.-74     	; 0x724 <__ultoa_invert+0xe>
 76e:	cf 01       	movw	r24, r30
 770:	08 95       	ret
 772:	46 2f       	mov	r20, r22
 774:	47 70       	andi	r20, 0x07	; 7
 776:	40 5d       	subi	r20, 0xD0	; 208
 778:	41 93       	st	Z+, r20
 77a:	b3 e0       	ldi	r27, 0x03	; 3
 77c:	0f d0       	rcall	.+30     	; 0x79c <__ultoa_invert+0x86>
 77e:	c9 f7       	brne	.-14     	; 0x772 <__ultoa_invert+0x5c>
 780:	f6 cf       	rjmp	.-20     	; 0x76e <__ultoa_invert+0x58>
 782:	46 2f       	mov	r20, r22
 784:	4f 70       	andi	r20, 0x0F	; 15
 786:	40 5d       	subi	r20, 0xD0	; 208
 788:	4a 33       	cpi	r20, 0x3A	; 58
 78a:	18 f0       	brcs	.+6      	; 0x792 <__ultoa_invert+0x7c>
 78c:	49 5d       	subi	r20, 0xD9	; 217
 78e:	31 fd       	sbrc	r19, 1
 790:	40 52       	subi	r20, 0x20	; 32
 792:	41 93       	st	Z+, r20
 794:	02 d0       	rcall	.+4      	; 0x79a <__ultoa_invert+0x84>
 796:	a9 f7       	brne	.-22     	; 0x782 <__ultoa_invert+0x6c>
 798:	ea cf       	rjmp	.-44     	; 0x76e <__ultoa_invert+0x58>
 79a:	b4 e0       	ldi	r27, 0x04	; 4
 79c:	a6 95       	lsr	r26
 79e:	97 95       	ror	r25
 7a0:	87 95       	ror	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	ba 95       	dec	r27
 7a8:	c9 f7       	brne	.-14     	; 0x79c <__ultoa_invert+0x86>
 7aa:	00 97       	sbiw	r24, 0x00	; 0
 7ac:	61 05       	cpc	r22, r1
 7ae:	71 05       	cpc	r23, r1
 7b0:	08 95       	ret
 7b2:	9b 01       	movw	r18, r22
 7b4:	ac 01       	movw	r20, r24
 7b6:	0a 2e       	mov	r0, r26
 7b8:	06 94       	lsr	r0
 7ba:	57 95       	ror	r21
 7bc:	47 95       	ror	r20
 7be:	37 95       	ror	r19
 7c0:	27 95       	ror	r18
 7c2:	ba 95       	dec	r27
 7c4:	c9 f7       	brne	.-14     	; 0x7b8 <__ultoa_invert+0xa2>
 7c6:	62 0f       	add	r22, r18
 7c8:	73 1f       	adc	r23, r19
 7ca:	84 1f       	adc	r24, r20
 7cc:	95 1f       	adc	r25, r21
 7ce:	a0 1d       	adc	r26, r0
 7d0:	08 95       	ret

000007d2 <__prologue_saves__>:
 7d2:	2f 92       	push	r2
 7d4:	3f 92       	push	r3
 7d6:	4f 92       	push	r4
 7d8:	5f 92       	push	r5
 7da:	6f 92       	push	r6
 7dc:	7f 92       	push	r7
 7de:	8f 92       	push	r8
 7e0:	9f 92       	push	r9
 7e2:	af 92       	push	r10
 7e4:	bf 92       	push	r11
 7e6:	cf 92       	push	r12
 7e8:	df 92       	push	r13
 7ea:	ef 92       	push	r14
 7ec:	ff 92       	push	r15
 7ee:	0f 93       	push	r16
 7f0:	1f 93       	push	r17
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
 7fa:	ca 1b       	sub	r28, r26
 7fc:	db 0b       	sbc	r29, r27
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	09 94       	ijmp

0000080a <__epilogue_restores__>:
 80a:	2a 88       	ldd	r2, Y+18	; 0x12
 80c:	39 88       	ldd	r3, Y+17	; 0x11
 80e:	48 88       	ldd	r4, Y+16	; 0x10
 810:	5f 84       	ldd	r5, Y+15	; 0x0f
 812:	6e 84       	ldd	r6, Y+14	; 0x0e
 814:	7d 84       	ldd	r7, Y+13	; 0x0d
 816:	8c 84       	ldd	r8, Y+12	; 0x0c
 818:	9b 84       	ldd	r9, Y+11	; 0x0b
 81a:	aa 84       	ldd	r10, Y+10	; 0x0a
 81c:	b9 84       	ldd	r11, Y+9	; 0x09
 81e:	c8 84       	ldd	r12, Y+8	; 0x08
 820:	df 80       	ldd	r13, Y+7	; 0x07
 822:	ee 80       	ldd	r14, Y+6	; 0x06
 824:	fd 80       	ldd	r15, Y+5	; 0x05
 826:	0c 81       	ldd	r16, Y+4	; 0x04
 828:	1b 81       	ldd	r17, Y+3	; 0x03
 82a:	aa 81       	ldd	r26, Y+2	; 0x02
 82c:	b9 81       	ldd	r27, Y+1	; 0x01
 82e:	ce 0f       	add	r28, r30
 830:	d1 1d       	adc	r29, r1
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	ed 01       	movw	r28, r26
 83e:	08 95       	ret

00000840 <_exit>:
 840:	f8 94       	cli

00000842 <__stop_program>:
 842:	ff cf       	rjmp	.-2      	; 0x842 <__stop_program>
