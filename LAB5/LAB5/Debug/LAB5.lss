
LAB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f7  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  000009e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bb  00000000  00000000  00001047  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036d  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 80 00 	call	0x100	; 0x100 <main>
  88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:



void initADC(void){
	
	ADMUX = 7;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	80 83       	st	Z, r24
	//REFERENCIA A 5V
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	
	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1

	//INTERRUPCION DEL ADC
	ADCSRA |= (1<<ADIE);
  b0:	80 81       	ld	r24, Z
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	80 83       	st	Z, r24
	
	//PREESCALER DE 125KHZ
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b6:	80 81       	ld	r24, Z
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	80 83       	st	Z, r24
	
	//HABILITACION DEL ADC
	ADCSRA |= (1<<ADEN);
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <setup>:

}


void setup(void){
	cli();
  c4:	f8 94       	cli
	
	DDRB = 0b11111111;   // Todo como salidas
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;		
  ca:	15 b8       	out	0x05, r1	; 5
	
	
	DDRD = 0b11111111;  //Salida de DISPLAY
  cc:	8a b9       	out	0x0a, r24	; 10
	PORTD =0b00000000;	//DISPLAY apagados
  ce:	1b b8       	out	0x0b, r1	; 11
	/*DDRC = 0b00111111;  //Salida de led
	PORTC =0b00000000;	//Iniciamos los leds apagados*/
	
	

	UCSR0B = 0;
  d0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	TCCR1A = 0;
  d4:	a0 e8       	ldi	r26, 0x80	; 128
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	1c 92       	st	X, r1
	TCCR1B = 0;
  da:	e1 e8       	ldi	r30, 0x81	; 129
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
	
	TCCR1A |= (1<<COM1A1);	//NO INVERTIDO
  e0:	8c 91       	ld	r24, X
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c 93       	st	X, r24
	TCCR1A |= (1<<WGM10);	//MODO FAST	
  e6:	8c 91       	ld	r24, X
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	8c 93       	st	X, r24
	
	TCCR1B |= (1<<WGM12);	//
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12)|(1<<CS10);	//PRESCALER DE 1024
  f2:	80 81       	ld	r24, Z
  f4:	85 60       	ori	r24, 0x05	; 5
  f6:	80 83       	st	Z, r24
	
	
	
		
	initADC();
  f8:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei(); //Activar interrupciones
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <main>:



int main(void)
{
    setup();
 100:	0e 94 62 00 	call	0xc4	; 0xc4 <setup>
	
    while (1) 
    {	
			ADCSRA |= (1<<ADSC);	//
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
			OCR1A  = valorADC/6;		
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 bf 00 	call	0x17e	; 0x17e <__divmodhi4>
 11e:	e8 e8       	ldi	r30, 0x88	; 136
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	71 83       	std	Z+1, r23	; 0x01
 124:	60 83       	st	Z, r22
			
			if (OCR1A <0)
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
			{
				OCR1A = 0;
			}
			else if (OCR1A>100)
 12a:	80 81       	ld	r24, Z
 12c:	91 81       	ldd	r25, Z+1	; 0x01
 12e:	85 36       	cpi	r24, 0x65	; 101
 130:	91 05       	cpc	r25, r1
 132:	40 f3       	brcs	.-48     	; 0x104 <main+0x4>
			{
				OCR1A = 100;
 134:	84 e6       	ldi	r24, 0x64	; 100
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 140:	e1 cf       	rjmp	.-62     	; 0x104 <main+0x4>

00000142 <__vector_21>:
	ADCSRA |= (1<<ADEN);
	
}


ISR(ADC_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	valorADC = ADCH;
 154:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//PORTD = ADCH;
	ADCSRA |= (1<<ADIF);	
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__divmodhi4>:
 17e:	97 fb       	bst	r25, 7
 180:	07 2e       	mov	r0, r23
 182:	16 f4       	brtc	.+4      	; 0x188 <__divmodhi4+0xa>
 184:	00 94       	com	r0
 186:	07 d0       	rcall	.+14     	; 0x196 <__divmodhi4_neg1>
 188:	77 fd       	sbrc	r23, 7
 18a:	09 d0       	rcall	.+18     	; 0x19e <__divmodhi4_neg2>
 18c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__udivmodhi4>
 190:	07 fc       	sbrc	r0, 7
 192:	05 d0       	rcall	.+10     	; 0x19e <__divmodhi4_neg2>
 194:	3e f4       	brtc	.+14     	; 0x1a4 <__divmodhi4_exit>

00000196 <__divmodhi4_neg1>:
 196:	90 95       	com	r25
 198:	81 95       	neg	r24
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	08 95       	ret

0000019e <__divmodhi4_neg2>:
 19e:	70 95       	com	r23
 1a0:	61 95       	neg	r22
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255

000001a4 <__divmodhi4_exit>:
 1a4:	08 95       	ret

000001a6 <__udivmodhi4>:
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	51 e1       	ldi	r21, 0x11	; 17
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <__udivmodhi4_ep>

000001ae <__udivmodhi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	a6 17       	cp	r26, r22
 1b4:	b7 07       	cpc	r27, r23
 1b6:	10 f0       	brcs	.+4      	; 0x1bc <__udivmodhi4_ep>
 1b8:	a6 1b       	sub	r26, r22
 1ba:	b7 0b       	sbc	r27, r23

000001bc <__udivmodhi4_ep>:
 1bc:	88 1f       	adc	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	5a 95       	dec	r21
 1c2:	a9 f7       	brne	.-22     	; 0x1ae <__udivmodhi4_loop>
 1c4:	80 95       	com	r24
 1c6:	90 95       	com	r25
 1c8:	bc 01       	movw	r22, r24
 1ca:	cd 01       	movw	r24, r26
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
